// Mocks generated by Mockito 5.4.6 from annotations
// in utme_prep_master/test/widget/ai_tutor_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i3;

import 'package:connectivity_plus/connectivity_plus.dart' as _i8;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:utme_prep_master/data/services/ai_service.dart' as _i4;
import 'package:utme_prep_master/presentation/providers/network_provider.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIconData_0 extends _i1.SmartFake implements _i2.IconData {
  _FakeIconData_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeColor_1 extends _i1.SmartFake implements _i3.Color {
  _FakeColor_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAIService extends _i1.Mock implements _i4.AIService {
  MockAIService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> getAIResponse(String? message) =>
      (super.noSuchMethod(
            Invocation.method(#getAIResponse, [message]),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getAIResponse, [message]),
              ),
            ),
          )
          as _i5.Future<String>);
}

/// A class which mocks [NetworkProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkProvider extends _i1.Mock implements _i7.NetworkProvider {
  MockNetworkProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i8.ConnectivityResult get connectivityResult =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityResult),
            returnValue: _i8.ConnectivityResult.bluetooth,
          )
          as _i8.ConnectivityResult);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  String get connectionTypeString =>
      (super.noSuchMethod(
            Invocation.getter(#connectionTypeString),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#connectionTypeString),
            ),
          )
          as String);

  @override
  bool get isStableConnection =>
      (super.noSuchMethod(
            Invocation.getter(#isStableConnection),
            returnValue: false,
          )
          as bool);

  @override
  bool get isMobileConnection =>
      (super.noSuchMethod(
            Invocation.getter(#isMobileConnection),
            returnValue: false,
          )
          as bool);

  @override
  String get connectionQuality =>
      (super.noSuchMethod(
            Invocation.getter(#connectionQuality),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#connectionQuality),
            ),
          )
          as String);

  @override
  _i2.IconData get connectionIcon =>
      (super.noSuchMethod(
            Invocation.getter(#connectionIcon),
            returnValue: _FakeIconData_0(
              this,
              Invocation.getter(#connectionIcon),
            ),
          )
          as _i2.IconData);

  @override
  _i3.Color get connectionColor =>
      (super.noSuchMethod(
            Invocation.getter(#connectionColor),
            returnValue: _FakeColor_1(
              this,
              Invocation.getter(#connectionColor),
            ),
          )
          as _i3.Color);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
